generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                                    String   @id @default(uuid()) @db.Uuid
  username                              String   @unique
  email                                 String?  @unique
  displayName                           String?  @map("display_name")
  spotifyId                             String?  @map("spotify_id")
  createdAt                             DateTime @default(now()) @map("created_at")
  friends_friends_action_user_idTousers Friend[] @relation("friends_action_user_idTousers")
  friends_friends_user_one_idTousers    Friend[] @relation("friends_user_one_idTousers")
  friends_friends_user_two_idTousers    Friend[] @relation("friends_user_two_idTousers")
  likes                                 Like[]
  posts                                 Post[]

  @@map("users")
}

model Friend {
  user_one_id                         String           @db.Uuid
  user_two_id                         String           @db.Uuid
  action_user_id                      String           @db.Uuid
  status                              FriendshipStatus @default(pending)
  createdAt                           DateTime         @default(now()) @map("created_at")
  updatedAt                           DateTime         @updatedAt @map("updated_at")
  users_friends_action_user_idTousers User             @relation("friends_action_user_idTousers", fields: [action_user_id], references: [id], onDelete: Cascade)
  users_friends_user_one_idTousers    User             @relation("friends_user_one_idTousers", fields: [user_one_id], references: [id], onDelete: Cascade)
  users_friends_user_two_idTousers    User             @relation("friends_user_two_idTousers", fields: [user_two_id], references: [id], onDelete: Cascade)

  @@id([user_one_id, user_two_id])
  @@map("friends")
}

model Post {
  postId      Int            @id @default(autoincrement()) @map("post_id")
  user_id     String         @db.Uuid
  content     String
  top_song_id BigInt
  likeCount   Int            @default(0) @map("like_count")
  visibility  PostVisibility @default(public)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  likes       Like[]
  songs       Song           @relation(fields: [top_song_id], references: [songId])
  users       User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Song {
  songId        BigInt   @id @default(autoincrement()) @map("song_id")
  spotifyId     String   @unique @map("spotify_id")
  songName      String   @map("song_name")
  artistName    String   @map("artist_name")
  albumName     String?  @map("album_name")
  coverArtUrl   String?  @map("cover_art_url")
  createdAt     DateTime @default(now()) @map("created_at")
  valence       Decimal? @db.Decimal
  arousal       Decimal? @db.Decimal
  analysis      Json?
  embedding     Json?
  va_prediction Json?
  posts         Post[]

  @@map("songs")
}

model Like {
  user_id   String   @db.Uuid
  post_id   Int
  createdAt DateTime @default(now()) @map("created_at")
  posts     Post     @relation(fields: [post_id], references: [postId], onDelete: Cascade)
  users     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
  @@map("likes")
}

enum FriendshipStatus {
  pending
  accepted
  blocked
}

enum PostVisibility {
  public
  friends_only
  private
}
